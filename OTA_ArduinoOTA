//Basic LED blinking

#include <WiFi.h>
#include <ArduinoOTA.h>

// Wi-Fi credentials
const char* ssid = "VenkateshNayak_4G";         // Replace with your WiFi SSID
const char* password = "9492761319";    // Replace with your WiFi Password

const int ledPin = 2; // ESP32 built-in LED GPIO 2

void setup() {
  // Start Serial Monitor
  Serial.begin(115200);

  // Initialize onboard LED
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW); // Turn off LED initially

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected to Wi-Fi");
  Serial.print("IP Address: ");
  Serial.println(WiFi.localIP());

  // Initialize OTA
  ArduinoOTA.setHostname("ESP32-OTA-Device"); // Set OTA device hostname

  ArduinoOTA.onStart([]() {
    String type = (ArduinoOTA.getCommand() == U_FLASH) ? "sketch" : "filesystem";
    Serial.println("Start updating " + type);
  });

  ArduinoOTA.onEnd([]() {
    Serial.println("\nOTA Update Complete");
    digitalWrite(ledPin, LOW); // Turn off LED after OTA
  });

  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });

  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });

  ArduinoOTA.begin();
  Serial.println("OTA Ready");
}

void loop() {
  // Handle OTA updates
  ArduinoOTA.handle();

  // Blink the LED
  digitalWrite(ledPin, HIGH);
  delay(500);
  digitalWrite(ledPin, LOW);
  delay(500);
}


//AFTER UPLOADING THIS CODDE JUST CHANGE THE DELAY AND PERFORM OTA OPERATION
